// Copyright (c) 2018 The MATRIX Authors
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php
// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/MatrixAINetwork/go-matrix/common"
	"github.com/MatrixAINetwork/go-matrix/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		AccountNonce hexutil.Uint64  `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     hexutil.Uint64  `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      hexutil.Bytes   `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
		TxEnterType  byte            `json:"TxEnterType" gencodec:"required"`
		IsEntrustTx  byte            `json:"IsEntrustTx" gencodec:"required"`
		CommitTime   uint64          `json:"CommitTime" gencodec:"required"`
		Extra        []Matrix_Extra  ` rlp:"tail"`
	}
	var enc txdata
	enc.AccountNonce = hexutil.Uint64(t.AccountNonce)
	enc.Price = (*hexutil.Big)(t.Price)
	enc.GasLimit = hexutil.Uint64(t.GasLimit)
	enc.Recipient = t.Recipient
	enc.Amount = (*hexutil.Big)(t.Amount)
	enc.Payload = t.Payload
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)
	enc.Hash = t.Hash
	enc.TxEnterType = t.TxEnterType
	enc.IsEntrustTx = t.IsEntrustTx
	enc.CommitTime = t.CommitTime
	enc.Extra = t.Extra
	return json.Marshal(&enc)
}

func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		AccountNonce *hexutil.Uint64 `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     *hexutil.Uint64 `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      *hexutil.Bytes  `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
		TxEnterType  byte            `json:"TxEnterType" gencodec:"required"`
		IsEntrustTx  byte            `json:"IsEntrustTx" gencodec:"required"`
		CommitTime   uint64          `json:"CommitTime" gencodec:"required"`
		Extra        []Matrix_Extra  ` rlp:"tail"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AccountNonce == nil {
		return errors.New("missing required field 'nonce' for txdata")
	}
	t.AccountNonce = uint64(*dec.AccountNonce)
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = (*big.Int)(dec.Price)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.GasLimit = uint64(*dec.GasLimit)
	if dec.Recipient != nil {
		t.Recipient = dec.Recipient
	}
	if dec.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.Amount = (*big.Int)(dec.Amount)
	if dec.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.Payload = *dec.Payload
	if dec.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.S = (*big.Int)(dec.S)
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	t.TxEnterType = dec.TxEnterType
	t.IsEntrustTx = dec.IsEntrustTx
	t.CommitTime = dec.CommitTime
	t.Extra = dec.Extra
	return nil
}
func (t man_txdata) MarshalJSON() ([]byte, error) {
	type txdata1 struct {
		AccountNonce hexutil.Uint64  `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     hexutil.Uint64  `json:"gas"      gencodec:"required"`
		Recipient    *string         `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      hexutil.Bytes   `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
		TxEnterType  byte            `json:"TxEnterType" gencodec:"required"`
		IsEntrustTx  byte            `json:"IsEntrustTx" gencodec:"required"`
		CommitTime   uint64          `json:"CommitTime" gencodec:"required"`
		Extra        []Matrix_Extra1 ` rlp:"tail"`
	}
	type man_txdata struct {
		currency string  `json:"currency"      gencodec:"required"`
		data     txdata1 `json:"data"      gencodec:"required"`
	}
	var enc man_txdata
	enc.currency = t.currency
	enc.data.AccountNonce = hexutil.Uint64(t.data.AccountNonce)
	enc.data.Price = (*hexutil.Big)(t.data.Price)
	enc.data.GasLimit = hexutil.Uint64(t.data.GasLimit)
	enc.data.Recipient = t.data.Recipient
	enc.data.Amount = (*hexutil.Big)(t.data.Amount)
	enc.data.Payload = t.data.Payload
	enc.data.V = (*hexutil.Big)(t.data.V)
	enc.data.R = (*hexutil.Big)(t.data.R)
	enc.data.S = (*hexutil.Big)(t.data.S)
	enc.data.Hash = t.data.Hash
	enc.data.TxEnterType = t.data.TxEnterType
	enc.data.IsEntrustTx = t.data.IsEntrustTx
	enc.data.CommitTime = t.data.CommitTime
	enc.data.Extra = t.data.Extra
	return json.Marshal(&enc)
}

//sendrawtransaction调用
func (t *man_txdata) UnmarshalJSON(input []byte) error {
	type txdata1 struct {
		AccountNonce *hexutil.Uint64 `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     *hexutil.Uint64 `json:"gas"      gencodec:"required"`
		Recipient    *string         `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      *hexutil.Bytes  `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
		TxEnterType  byte            `json:"TxEnterType" gencodec:"required"`
		IsEntrustTx  byte            `json:"IsEntrustTx" gencodec:"required"`
		CommitTime   uint64          `json:"CommitTime" gencodec:"required"`
		Extra        []Matrix_Extra1 ` rlp:"tail"`
	}
	type man_txdata struct {
		currency *string `json:"currency"      gencodec:"required"`
		data     txdata1 `json:"data"      gencodec:"required"`
	}
	var dec man_txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.currency == nil {
		return errors.New("missing required field 'currency' for txdata")
	}
	t.currency = *dec.currency
	if dec.data.AccountNonce == nil {
		return errors.New("missing required field 'nonce' for txdata")
	}
	t.data.AccountNonce = uint64(*dec.data.AccountNonce)
	if dec.data.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.data.Price = (*big.Int)(dec.data.Price)
	if dec.data.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.data.GasLimit = uint64(*dec.data.GasLimit)
	if dec.data.Recipient != nil {
		t.data.Recipient = dec.data.Recipient
	}
	if dec.data.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.data.Amount = (*big.Int)(dec.data.Amount)
	if dec.data.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.data.Payload = *dec.data.Payload
	if dec.data.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.data.V = (*big.Int)(dec.data.V)
	if dec.data.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.data.R = (*big.Int)(dec.data.R)
	if dec.data.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.data.S = (*big.Int)(dec.data.S)
	if dec.data.Hash != nil {
		t.data.Hash = dec.data.Hash
	}
	t.data.TxEnterType = dec.data.TxEnterType
	t.data.IsEntrustTx = dec.data.IsEntrustTx
	t.data.CommitTime = dec.data.CommitTime
	t.data.Extra = dec.data.Extra
	return nil
}
